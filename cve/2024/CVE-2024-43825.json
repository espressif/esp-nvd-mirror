{"cve": {"id": "CVE-2024-43825", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-08-17T10:15:08.533", "lastModified": "2024-08-19T12:59:59.177", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\niio: Fix the sorting functionality in iio_gts_build_avail_time_table\n\nThe sorting in iio_gts_build_avail_time_table is not working as intended.\nIt could result in an out-of-bounds access when the time is zero.\n\nHere are more details:\n\n1. When the gts->itime_table[i].time_us is zero, e.g., the time\nsequence is `3, 0, 1`, the inner for-loop will not terminate and do\nout-of-bound writes. This is because once `times[j] > new`, the value\n`new` will be added in the current position and the `times[j]` will be\nmoved to `j+1` position, which makes the if-condition always hold.\nMeanwhile, idx will be added one, making the loop keep running without\ntermination and out-of-bound write.\n2. If none of the gts->itime_table[i].time_us is zero, the elements\nwill just be copied without being sorted as described in the comment\n\"Sort times from all tables to one and remove duplicates\".\n\nFor more details, please refer to\nhttps://lore.kernel.org/all/6dd0d822-046c-4dd2-9532-79d7ab96ec05@gmail.com."}, {"lang": "es", "value": "En el kernel de Linux, se resolvi\u00f3 la siguiente vulnerabilidad: iio: corrigi\u00f3 la funcionalidad de clasificaci\u00f3n en iio_gts_build_avail_time_table La clasificaci\u00f3n en iio_gts_build_avail_time_table no funciona seg\u00fan lo previsto. Podr\u00eda resultar en un acceso fuera de los l\u00edmites cuando el tiempo sea cero. Aqu\u00ed hay m\u00e1s detalles: 1. Cuando gts-&gt;itime_table[i].time_us es cero, por ejemplo, la secuencia de tiempo es `3, 0, 1`, el bucle for interno no terminar\u00e1 y funcionar\u00e1 fuera de l\u00edmite. Esto se debe a que una vez `times[j] &gt; new`, el valor `new` se agregar\u00e1 en la posici\u00f3n actual y `times[j]` se mover\u00e1 a la posici\u00f3n `j+1`, lo que hace que la condici\u00f3n if aguanta siempre. Mientras tanto, se agregar\u00e1 uno a idx, lo que har\u00e1 que el bucle siga ejecut\u00e1ndose sin terminaci\u00f3n ni escritura fuera de los l\u00edmites. 2. Si ninguno de los gts-&gt;itime_table[i].time_us es cero, los elementos simplemente se copiar\u00e1n sin ordenarse como se describe en el comentario \"Ordenar tiempos de todas las tablas a una y eliminar duplicados\". Para obtener m\u00e1s detalles, consulte https://lore.kernel.org/all/6dd0d822-046c-4dd2-9532-79d7ab96ec05@gmail.com."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/31ff8464ef540785344994986a010031410f9ff3", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/5acc3f971a01be48d5ff4252d8f9cdb87998cdfb", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/b5046de32fd1532c3f67065197fc1da82f0b5193", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}]}}