{"cve": {"id": "CVE-2024-50020", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-10-21T20:15:15.573", "lastModified": "2024-10-23T15:12:34.673", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nice: Fix improper handling of refcount in ice_sriov_set_msix_vec_count()\n\nThis patch addresses an issue with improper reference count handling in the\nice_sriov_set_msix_vec_count() function.\n\nFirst, the function calls ice_get_vf_by_id(), which increments the\nreference count of the vf pointer. If the subsequent call to\nice_get_vf_vsi() fails, the function currently returns an error without\ndecrementing the reference count of the vf pointer, leading to a reference\ncount leak. The correct behavior, as implemented in this patch, is to\ndecrement the reference count using ice_put_vf(vf) before returning an\nerror when vsi is NULL.\n\nSecond, the function calls ice_sriov_get_irqs(), which sets\nvf->first_vector_idx. If this call returns a negative value, indicating an\nerror, the function returns an error without decrementing the reference\ncount of the vf pointer, resulting in another reference count leak. The\npatch addresses this by adding a call to ice_put_vf(vf) before returning\nan error when vf->first_vector_idx < 0.\n\nThis bug was identified by an experimental static analysis tool developed\nby our team. The tool specializes in analyzing reference count operations\nand identifying potential mismanagement of reference counts. In this case,\nthe tool flagged the missing decrement operation as a potential issue,\nleading to this patch."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: ice: Se corrige el manejo incorrecto de refcount en ice_sriov_set_msix_vec_count() Este parche soluciona un problema con el manejo incorrecto del recuento de referencias en la funci\u00f3n ice_sriov_set_msix_vec_count(). Primero, la funci\u00f3n llama a ice_get_vf_by_id(), que incrementa el recuento de referencias del puntero vf. Si la llamada posterior a ice_get_vf_vsi() fallo, la funci\u00f3n actualmente devuelve un error sin disminuir el recuento de referencias del puntero vf, lo que lleva a una p\u00e9rdida del recuento de referencias. El comportamiento correcto, como se implement\u00f3 en este parche, es disminuir el recuento de referencias usando ice_put_vf(vf) antes de devolver un error cuando vsi es NULL. En segundo lugar, la funci\u00f3n llama a ice_sriov_get_irqs(), que establece vf-&gt;first_vector_idx. Si esta llamada devuelve un valor negativo, lo que indica un error, la funci\u00f3n devuelve un error sin disminuir el recuento de referencia del puntero vf, lo que genera otra p\u00e9rdida de recuento de referencia. El parche soluciona este problema agregando una llamada a ice_put_vf(vf) antes de devolver un error cuando vf-&gt;first_vector_idx &lt; 0. Este error fue identificado por una herramienta de an\u00e1lisis est\u00e1tico experimental desarrollada por nuestro equipo. La herramienta se especializa en analizar operaciones de recuento de referencia e identificar posibles errores de administraci\u00f3n de los recuentos de referencia. En este caso, la herramienta marc\u00f3 la operaci\u00f3n de disminuci\u00f3n faltante como un problema potencial, lo que llev\u00f3 a este parche."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/416dbb815ca69684de148328990ba0ec53e6dbc1", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/d517cf89874c6039e6294b18d66f40988e62502a", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}]}}