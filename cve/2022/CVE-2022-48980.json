{"cve": {"id": "CVE-2022-48980", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2024-10-21T20:15:10.037", "lastModified": "2024-10-23T15:13:25.583", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nnet: dsa: sja1105: avoid out of bounds access in sja1105_init_l2_policing()\n\nThe SJA1105 family has 45 L2 policing table entries\n(SJA1105_MAX_L2_POLICING_COUNT) and SJA1110 has 110\n(SJA1110_MAX_L2_POLICING_COUNT). Keeping the table structure but\naccounting for the difference in port count (5 in SJA1105 vs 10 in\nSJA1110) does not fully explain the difference. Rather, the SJA1110 also\nhas L2 ingress policers for multicast traffic. If a packet is classified\nas multicast, it will be processed by the policer index 99 + SRCPORT.\n\nThe sja1105_init_l2_policing() function initializes all L2 policers such\nthat they don't interfere with normal packet reception by default. To have\na common code between SJA1105 and SJA1110, the index of the multicast\npolicer for the port is calculated because it's an index that is out of\nbounds for SJA1105 but in bounds for SJA1110, and a bounds check is\nperformed.\n\nThe code fails to do the proper thing when determining what to do with the\nmulticast policer of port 0 on SJA1105 (ds->num_ports = 5). The \"mcast\"\nindex will be equal to 45, which is also equal to\ntable->ops->max_entry_count (SJA1105_MAX_L2_POLICING_COUNT). So it passes\nthrough the check. But at the same time, SJA1105 doesn't have multicast\npolicers. So the code programs the SHARINDX field of an out-of-bounds\nelement in the L2 Policing table of the static config.\n\nThe comparison between index 45 and 45 entries should have determined the\ncode to not access this policer index on SJA1105, since its memory wasn't\neven allocated.\n\nWith enough bad luck, the out-of-bounds write could even overwrite other\nvalid kernel data, but in this case, the issue was detected using KASAN.\n\nKernel log:\n\nsja1105 spi5.0: Probed switch chip: SJA1105Q\n==================================================================\nBUG: KASAN: slab-out-of-bounds in sja1105_setup+0x1cbc/0x2340\nWrite of size 8 at addr ffffff880bd57708 by task kworker/u8:0/8\n...\nWorkqueue: events_unbound deferred_probe_work_func\nCall trace:\n...\nsja1105_setup+0x1cbc/0x2340\ndsa_register_switch+0x1284/0x18d0\nsja1105_probe+0x748/0x840\n...\nAllocated by task 8:\n...\nsja1105_setup+0x1bcc/0x2340\ndsa_register_switch+0x1284/0x18d0\nsja1105_probe+0x748/0x840\n..."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: net: dsa: sja1105: evitar acceso fuera de los l\u00edmites en sja1105_init_l2_policing() La familia SJA1105 tiene 45 entradas de tabla de control de L2 (SJA1105_MAX_L2_POLICING_COUNT) y SJA1110 tiene 110 (SJA1110_MAX_L2_POLICING_COUNT). Mantener la estructura de la tabla pero tener en cuenta la diferencia en el recuento de puertos (5 en SJA1105 frente a 10 en SJA1110) no explica completamente la diferencia. En cambio, SJA1110 tambi\u00e9n tiene controladores de ingreso de L2 para tr\u00e1fico de multidifusi\u00f3n. Si un paquete se clasifica como de multidifusi\u00f3n, ser\u00e1 procesado por el \u00edndice de controlador 99 + SRCPORT. La funci\u00f3n sja1105_init_l2_policing() inicializa todos los controladores de L2 de modo que no interfieran con la recepci\u00f3n normal de paquetes de forma predeterminada. Para tener un c\u00f3digo com\u00fan entre SJA1105 y SJA1110, se calcula el \u00edndice del controlador de multidifusi\u00f3n para el puerto porque es un \u00edndice que est\u00e1 fuera de los l\u00edmites para SJA1105 pero dentro de los l\u00edmites para SJA1110, y se realiza una comprobaci\u00f3n de los l\u00edmites. El c\u00f3digo no hace lo correcto al determinar qu\u00e9 hacer con el controlador de multidifusi\u00f3n del puerto 0 en SJA1105 (ds-&gt;num_ports = 5). El \u00edndice \"mcast\" ser\u00e1 igual a 45, que tambi\u00e9n es igual a table-&gt;ops-&gt;max_entry_count (SJA1105_MAX_L2_POLICING_COUNT). Por lo tanto, pasa por la comprobaci\u00f3n. Pero al mismo tiempo, SJA1105 no tiene controladores de multidifusi\u00f3n. Por lo tanto, el c\u00f3digo programa el campo SHARINDX de un elemento fuera de los l\u00edmites en la tabla de control L2 de la configuraci\u00f3n est\u00e1tica. La comparaci\u00f3n entre las entradas del \u00edndice 45 y 45 deber\u00eda haber determinado que el c\u00f3digo no accediera a este \u00edndice de control en SJA1105, ya que su memoria ni siquiera estaba asignada. Con suficiente mala suerte, la escritura fuera de los l\u00edmites podr\u00eda incluso sobrescribir otros datos v\u00e1lidos del kernel, pero en este caso, el problema se detect\u00f3 mediante KASAN. Registro del n\u00facleo: sja1105 spi5.0: Chip conmutador sondeado: SJA1105Q ===================================================================== ERROR: KASAN: slab fuera de los l\u00edmites en sja1105_setup+0x1cbc/0x2340 Escritura de tama\u00f1o 8 en la direcci\u00f3n ffffff880bd57708 por la tarea kworker/u8:0/8 ... Cola de trabajo: events_unbound deferred_probe_work_func Rastreo de llamadas: ... sja1105_setup+0x1cbc/0x2340 dsa_register_switch+0x1284/0x18d0 sja1105_probe+0x748/0x840 ... Asignado por la tarea 8: ... sja1105_setup+0x1bcc/0x2340 dsa_register_switch+0x1284/0x18d0 sja1105_probe+0x748/0x840 ..."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/147f3e3d84054117ae6b9bf317ec4fda9f991192", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/5e88c6f4aaa70c542e59e5a9d2244bcc99cd245d", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/f8bac7f9fdb0017b32157957ffffd490f95faa07", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}]}}