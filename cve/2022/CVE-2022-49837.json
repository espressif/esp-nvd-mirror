{"cve": {"id": "CVE-2022-49837", "sourceIdentifier": "416baaa9-dc9f-4396-8d5f-8c081fb06d67", "published": "2025-05-01T15:16:07.187", "lastModified": "2025-05-02T13:53:20.943", "vulnStatus": "Awaiting Analysis", "cveTags": [], "descriptions": [{"lang": "en", "value": "In the Linux kernel, the following vulnerability has been resolved:\n\nbpf: Fix memory leaks in __check_func_call\n\nkmemleak reports this issue:\n\nunreferenced object 0xffff88817139d000 (size 2048):\n  comm \"test_progs\", pid 33246, jiffies 4307381979 (age 45851.820s)\n  hex dump (first 32 bytes):\n    01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n  backtrace:\n    [<0000000045f075f0>] kmalloc_trace+0x27/0xa0\n    [<0000000098b7c90a>] __check_func_call+0x316/0x1230\n    [<00000000b4c3c403>] check_helper_call+0x172e/0x4700\n    [<00000000aa3875b7>] do_check+0x21d8/0x45e0\n    [<000000001147357b>] do_check_common+0x767/0xaf0\n    [<00000000b5a595b4>] bpf_check+0x43e3/0x5bc0\n    [<0000000011e391b1>] bpf_prog_load+0xf26/0x1940\n    [<0000000007f765c0>] __sys_bpf+0xd2c/0x3650\n    [<00000000839815d6>] __x64_sys_bpf+0x75/0xc0\n    [<00000000946ee250>] do_syscall_64+0x3b/0x90\n    [<0000000000506b7f>] entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nThe root case here is: In function prepare_func_exit(), the callee is\nnot released in the abnormal scenario after \"state->curframe--;\". To\nfix, move \"state->curframe--;\" to the very bottom of the function,\nright when we free callee and reset frame[] pointer to NULL, as Andrii\nsuggested.\n\nIn addition, function __check_func_call() has a similar problem. In\nthe abnormal scenario before \"state->curframe++;\", the callee also\nshould be released by free_func_state()."}, {"lang": "es", "value": "En el kernel de Linux, se ha resuelto la siguiente vulnerabilidad: bpf: Se corrigen fugas de memoria en __check_func_call kmemleak informa de este problema: objeto sin referencia 0xffff88817139d000 (tama\u00f1o 2048): comm \"test_progs\", pid 33246, jiffies 4307381979 (edad 45851.820s) volcado hexadecimal (primeros 32 bytes): 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ backtrace: [&lt;0000000045f075f0&gt;] kmalloc_trace+0x27/0xa0 [&lt;0000000098b7c90a&gt;] __check_func_call+0x316/0x1230 [&lt;00000000b4c3c403&gt;] check_helper_call+0x172e/0x4700 [&lt;00000000aa3875b7&gt;] do_check+0x21d8/0x45e0 [&lt;000000001147357b&gt;] do_check_common+0x767/0xaf0 [&lt;00000000b5a595b4&gt;] bpf_check+0x43e3/0x5bc0 [&lt;0000000011e391b1&gt;] bpf_prog_load+0xf26/0x1940 [&lt;0000000007f765c0&gt;] __sys_bpf+0xd2c/0x3650 [&lt;00000000839815d6&gt;] __x64_sys_bpf+0x75/0xc0 [&lt;00000000946ee250&gt;] do_syscall_64+0x3b/0x90 [&lt;0000000000506b7f&gt;] entry_SYSCALL_64_after_hwframe+0x63/0xcd El caso ra\u00edz aqu\u00ed es: En la funci\u00f3n prepare_func_exit(), el llamado no se libera en el escenario anormal despu\u00e9s de \"state-&gt;curframe--;\". Para solucionarlo, mueva \"state-&gt;curframe--;\" al final de la funci\u00f3n, justo cuando liberamos al destinatario y restablecemos el puntero frame[] a NULL, como sugiri\u00f3 Andrii. Adem\u00e1s, la funci\u00f3n __check_func_call() presenta un problema similar. En el escenario anormal anterior a \"state-&gt;curframe++;\", el destinatario tambi\u00e9n deber\u00eda ser liberado por free_func_state()."}], "metrics": {}, "references": [{"url": "https://git.kernel.org/stable/c/83946d772e756734a900ef99dbe0aeda506adf37", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/d4944497827a3d14bc5a26dbcfb7433eb5a956c0", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}, {"url": "https://git.kernel.org/stable/c/eb86559a691cea5fa63e57a03ec3dc9c31e97955", "source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67"}]}}